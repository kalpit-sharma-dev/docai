version: '3.8'

services:
  # PS-05 Backend Service (FastAPI + ML Pipeline)
  ps05-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ps05-document-ai-backend
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - DATABASE_URL=sqlite:///./ps05_document_ai.db
      - UPLOAD_DIR=./uploads
      - MODEL_CACHE_DIR=./models
      - STAGE=1
      - GPU_AVAILABLE=true
    volumes:
      - ./uploads:/app/uploads
      - ./models:/app/models
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # PS-05 Frontend Service (React Native/Expo)
  ps05-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ps05-document-ai-frontend
    ports:
      - "19000:19000"  # Expo dev server
      - "19001:19001"  # Expo dev tools
      - "19002:19002"  # Expo tunnel
    environment:
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
      - REACT_NATIVE_PACKAGER_HOSTNAME=localhost
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - ps05-backend
    restart: unless-stopped

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: ps05-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: ps05-postgres
    environment:
      - POSTGRES_DB=ps05_document_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=ps05_password_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: ps05-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ps05-backend
      - ps05-frontend
    restart: unless-stopped

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: ps05-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ps05-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ps05_admin_2025
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: ps05-network
    driver: bridge
